{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport TabBarIcon from \"./TabBarIcon\";\nexport default function BottomTabBarItem(_ref2) {\n  var focused = _ref2.focused,\n      route = _ref2.route,\n      label = _ref2.label,\n      icon = _ref2.icon,\n      badge = _ref2.badge,\n      to = _ref2.to,\n      _ref2$button = _ref2.button,\n      button = _ref2$button === void 0 ? function (_ref) {\n    var children = _ref.children,\n        style = _ref.style,\n        _onPress = _ref.onPress,\n        to = _ref.to,\n        accessibilityRole = _ref.accessibilityRole,\n        rest = _objectWithoutProperties(_ref, [\"children\", \"style\", \"onPress\", \"to\", \"accessibilityRole\"]);\n\n    if (Platform.OS === 'web' && to) {\n      return React.createElement(Link, _extends({}, rest, {\n        to: to,\n        style: [styles.button, style],\n        onPress: function onPress(e) {\n          if (!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0)) {\n              e.preventDefault();\n              _onPress === null || _onPress === void 0 ? void 0 : _onPress(e);\n            }\n        }\n      }), children);\n    } else {\n      return React.createElement(TouchableWithoutFeedback, _extends({}, rest, {\n        accessibilityRole: accessibilityRole,\n        onPress: _onPress\n      }), React.createElement(View, {\n        style: style\n      }, children));\n    }\n  } : _ref2$button,\n      accessibilityLabel = _ref2.accessibilityLabel,\n      testID = _ref2.testID,\n      onPress = _ref2.onPress,\n      onLongPress = _ref2.onLongPress,\n      horizontal = _ref2.horizontal,\n      customActiveTintColor = _ref2.activeTintColor,\n      customInactiveTintColor = _ref2.inactiveTintColor,\n      _ref2$activeBackgroun = _ref2.activeBackgroundColor,\n      activeBackgroundColor = _ref2$activeBackgroun === void 0 ? 'transparent' : _ref2$activeBackgroun,\n      _ref2$inactiveBackgro = _ref2.inactiveBackgroundColor,\n      inactiveBackgroundColor = _ref2$inactiveBackgro === void 0 ? 'transparent' : _ref2$inactiveBackgro,\n      _ref2$showLabel = _ref2.showLabel,\n      showLabel = _ref2$showLabel === void 0 ? true : _ref2$showLabel,\n      allowFontScaling = _ref2.allowFontScaling,\n      labelStyle = _ref2.labelStyle,\n      iconStyle = _ref2.iconStyle,\n      style = _ref2.style;\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var activeTintColor = customActiveTintColor === undefined ? colors.primary : customActiveTintColor;\n  var inactiveTintColor = customInactiveTintColor === undefined ? Color(colors.text).mix(Color(colors.card), 0.5).hex() : customInactiveTintColor;\n\n  var renderLabel = function renderLabel(_ref3) {\n    var focused = _ref3.focused;\n\n    if (showLabel === false) {\n      return null;\n    }\n\n    var color = focused ? activeTintColor : inactiveTintColor;\n\n    if (typeof label === 'string') {\n      return React.createElement(Text, {\n        numberOfLines: 1,\n        style: [styles.label, {\n          color: color\n        }, horizontal ? styles.labelBeside : styles.labelBeneath, labelStyle],\n        allowFontScaling: allowFontScaling\n      }, label);\n    }\n\n    return label({\n      focused: focused,\n      color: color,\n      position: horizontal ? 'beside-icon' : 'below-icon'\n    });\n  };\n\n  var renderIcon = function renderIcon(_ref4) {\n    var focused = _ref4.focused;\n\n    if (icon === undefined) {\n      return null;\n    }\n\n    var activeOpacity = focused ? 1 : 0;\n    var inactiveOpacity = focused ? 0 : 1;\n    return React.createElement(TabBarIcon, {\n      route: route,\n      horizontal: horizontal,\n      badge: badge,\n      activeOpacity: activeOpacity,\n      inactiveOpacity: inactiveOpacity,\n      activeTintColor: activeTintColor,\n      inactiveTintColor: inactiveTintColor,\n      renderIcon: icon,\n      style: iconStyle\n    });\n  };\n\n  var scene = {\n    route: route,\n    focused: focused\n  };\n  var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n  return button({\n    to: to,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    testID: testID,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: 'button',\n    accessibilityState: {\n      selected: focused\n    },\n    accessibilityStates: focused ? ['selected'] : [],\n    style: [styles.tab, {\n      backgroundColor: backgroundColor\n    }, horizontal ? styles.tabLandscape : styles.tabPortrait, style],\n    children: React.createElement(React.Fragment, null, renderIcon(scene), renderLabel(scene))\n  });\n}\nvar styles = StyleSheet.create({\n  tab: {\n    flex: 1,\n    alignItems: 'center'\n  },\n  tabPortrait: {\n    justifyContent: 'flex-end',\n    flexDirection: 'column'\n  },\n  tabLandscape: {\n    justifyContent: 'center',\n    flexDirection: 'row'\n  },\n  label: {\n    textAlign: 'center',\n    backgroundColor: 'transparent'\n  },\n  labelBeneath: {\n    fontSize: 10\n  },\n  labelBeside: {\n    fontSize: 13,\n    marginLeft: 20,\n    marginTop: 3\n  },\n  button: {\n    display: 'flex'\n  }\n});","map":{"version":3,"sources":["BottomTabItem.tsx"],"names":["button","onPress","accessibilityRole","rest","Platform","styles","e","style","activeTintColor","inactiveTintColor","activeBackgroundColor","inactiveBackgroundColor","showLabel","colors","useTheme","customActiveTintColor","customInactiveTintColor","Color","renderLabel","focused","color","horizontal","allowFontScaling","label","position","renderIcon","icon","activeOpacity","inactiveOpacity","iconStyle","scene","route","backgroundColor","to","onLongPress","testID","accessibilityLabel","accessibilityState","selected","accessibilityStates","children","tab","flex","alignItems","tabPortrait","justifyContent","flexDirection","tabLandscape","textAlign","labelBeneath","fontSize","labelBeside","marginLeft","marginTop","display"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  Text,\n  TouchableWithoutFeedback,\n  StyleSheet,\n  Platform,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  GestureResponderEvent,\n} from 'react-native';\nimport { Link, Route, useTheme } from '@react-navigation/native';\nimport Color from 'color';\n\nimport TabBarIcon from './TabBarIcon';\nimport type { BottomTabBarButtonProps, LabelPosition } from '../types';\n\ntype Props = {\n  /**\n   * Whether the tab is focused.\n   */\n  focused: boolean;\n  /**\n   * The route object which should be specified by the tab.\n   */\n  route: Route<string>;\n  /**\n   * The label text of the tab.\n   */\n  label:\n    | string\n    | ((props: {\n        focused: boolean;\n        color: string;\n        position: LabelPosition;\n      }) => React.ReactNode);\n  /**\n   * Icon to display for the tab.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Text to show in a badge on the tab icon.\n   */\n  badge?: number | string;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * The button for the tab. Uses a `TouchableWithoutFeedback` by default.\n   */\n  button?: (props: BottomTabBarButtonProps) => React.ReactNode;\n  /**\n   * The accessibility label for the tab.\n   */\n  accessibilityLabel?: string;\n  /**\n   * An unique ID for testing for the tab.\n   */\n  testID?: string;\n  /**\n   * Function to execute on press in React Native.\n   * On the web, this will use onClick.\n   */\n  onPress: (\n    e: React.MouseEvent<HTMLElement, MouseEvent> | GestureResponderEvent\n  ) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress: (e: GestureResponderEvent) => void;\n  /**\n   * Whether the label should be aligned with the icon horizontally.\n   */\n  horizontal: boolean;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Whether to show the label text for the tab.\n   */\n  showLabel?: boolean;\n  /**\n   * Whether to allow scaling the font for the label for accessibility purposes.\n   */\n  allowFontScaling?: boolean;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the icon element.\n   */\n  iconStyle?: StyleProp<ViewStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function BottomTabBarItem({\n  focused,\n  route,\n  label,\n  icon,\n  badge,\n  to,\n  button = ({\n    children,\n    style,\n    onPress,\n    to,\n    accessibilityRole,\n    ...rest\n  }: BottomTabBarButtonProps) => {\n    if (Platform.OS === 'web' && to) {\n      // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n      // We need to use `onClick` to be able to prevent default browser handling of links.\n      return (\n        <Link\n          {...rest}\n          to={to}\n          style={[styles.button, style]}\n          onPress={(e: any) => {\n            if (\n              !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n              (e.button == null || e.button === 0) // ignore everything but left clicks\n            ) {\n              e.preventDefault();\n              onPress?.(e);\n            }\n          }}\n        >\n          {children}\n        </Link>\n      );\n    } else {\n      return (\n        <TouchableWithoutFeedback\n          {...rest}\n          accessibilityRole={accessibilityRole}\n          onPress={onPress}\n        >\n          <View style={style}>{children}</View>\n        </TouchableWithoutFeedback>\n      );\n    }\n  },\n  accessibilityLabel,\n  testID,\n  onPress,\n  onLongPress,\n  horizontal,\n  activeTintColor: customActiveTintColor,\n  inactiveTintColor: customInactiveTintColor,\n  activeBackgroundColor = 'transparent',\n  inactiveBackgroundColor = 'transparent',\n  showLabel = true,\n  allowFontScaling,\n  labelStyle,\n  iconStyle,\n  style,\n}: Props) {\n  const { colors } = useTheme();\n\n  const activeTintColor =\n    customActiveTintColor === undefined\n      ? colors.primary\n      : customActiveTintColor;\n\n  const inactiveTintColor =\n    customInactiveTintColor === undefined\n      ? Color(colors.text).mix(Color(colors.card), 0.5).hex()\n      : customInactiveTintColor;\n\n  const renderLabel = ({ focused }: { focused: boolean }) => {\n    if (showLabel === false) {\n      return null;\n    }\n\n    const color = focused ? activeTintColor : inactiveTintColor;\n\n    if (typeof label === 'string') {\n      return (\n        <Text\n          numberOfLines={1}\n          style={[\n            styles.label,\n            { color },\n            horizontal ? styles.labelBeside : styles.labelBeneath,\n            labelStyle,\n          ]}\n          allowFontScaling={allowFontScaling}\n        >\n          {label}\n        </Text>\n      );\n    }\n\n    return label({\n      focused,\n      color,\n      position: horizontal ? 'beside-icon' : 'below-icon',\n    });\n  };\n\n  const renderIcon = ({ focused }: { focused: boolean }) => {\n    if (icon === undefined) {\n      return null;\n    }\n\n    const activeOpacity = focused ? 1 : 0;\n    const inactiveOpacity = focused ? 0 : 1;\n\n    return (\n      <TabBarIcon\n        route={route}\n        horizontal={horizontal}\n        badge={badge}\n        activeOpacity={activeOpacity}\n        inactiveOpacity={inactiveOpacity}\n        activeTintColor={activeTintColor}\n        inactiveTintColor={inactiveTintColor}\n        renderIcon={icon}\n        style={iconStyle}\n      />\n    );\n  };\n\n  const scene = { route, focused };\n\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  return button({\n    to,\n    onPress,\n    onLongPress,\n    testID,\n    accessibilityLabel,\n    accessibilityRole: 'button',\n    accessibilityState: { selected: focused },\n    accessibilityStates: focused ? ['selected'] : [],\n    style: [\n      styles.tab,\n      { backgroundColor },\n      horizontal ? styles.tabLandscape : styles.tabPortrait,\n      style,\n    ],\n    children: (\n      <React.Fragment>\n        {renderIcon(scene)}\n        {renderLabel(scene)}\n      </React.Fragment>\n    ),\n  }) as React.ReactElement;\n}\n\nconst styles = StyleSheet.create({\n  tab: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  tabPortrait: {\n    justifyContent: 'flex-end',\n    flexDirection: 'column',\n  },\n  tabLandscape: {\n    justifyContent: 'center',\n    flexDirection: 'row',\n  },\n  label: {\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n  },\n  labelBeneath: {\n    fontSize: 10,\n  },\n  labelBeside: {\n    fontSize: 13,\n    marginLeft: 20,\n    marginTop: 3,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}